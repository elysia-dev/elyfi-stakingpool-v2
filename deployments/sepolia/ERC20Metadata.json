{
  "address": "0xA33cfb48338450AEcc3e7dA69E7F99AC923cfc28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71fe8d4c123b3ea4fe21e11e3f746aabe3cd283b03f448ecba8ba4a526c0fc3c",
  "receipt": {
    "to": null,
    "from": "0x4B994361257d060cF20dab2F13286B16B0019FdE",
    "contractAddress": "0xA33cfb48338450AEcc3e7dA69E7F99AC923cfc28",
    "transactionIndex": 43,
    "gasUsed": "488407",
    "logsBloom": "0x
    "blockHash": "0x9741e20c2f8c1d4f82c9ea0adeca8845cc1ed355b4c3109de0bdd872fc16597a",
    "transactionHash": "0x71fe8d4c123b3ea4fe21e11e3f746aabe3cd283b03f448ecba8ba4a526c0fc3c",
    "logs": [],
    "blockNumber": 5144149,
    "cumulativeGasUsed": "3220163",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5b5347f8106040999d6b1526e14adcd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ERC20Metadata.sol\":\"ERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary ERC20Metadata {\\n  function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n    bytes memory bytesString = new bytes(32);\\n    uint256 charCount = 0;\\n    for (uint256 j = 0; j < 32; j++) {\\n      bytes1 char = x[j];\\n      if (char != 0) {\\n        bytesString[charCount] = char;\\n        charCount++;\\n      }\\n    }\\n    bytes memory bytesStringTrimmed = new bytes(charCount);\\n    for (uint256 j = 0; j < charCount; j++) {\\n      bytesStringTrimmed[j] = bytesString[j];\\n    }\\n    return string(bytesStringTrimmed);\\n  }\\n\\n  // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n  function callAndParseStringReturn(address token, bytes4 selector)\\n    private\\n    view\\n    returns (string memory)\\n  {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n    // if not implemented, or returns empty data, return empty string\\n    if (!success || data.length == 0) {\\n      return '';\\n    }\\n    // bytes32 data always has length 32\\n    if (data.length == 32) {\\n      bytes32 decoded = abi.decode(data, (bytes32));\\n      return bytes32ToString(decoded);\\n    } else if (data.length > 64) {\\n      return abi.decode(data, (string));\\n    }\\n    return '';\\n  }\\n\\n  // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n  function tokenSymbol(address token) external view returns (string memory) {\\n    string memory symbol = callAndParseStringReturn(token, IERC20Metadata.symbol.selector);\\n    if (bytes(symbol).length == 0) {\\n      // fallback to 6 uppercase hex of address\\n      return Strings.toHexString(uint256(keccak256(abi.encode(token))), 32);\\n    }\\n    return symbol;\\n  }\\n\\n  // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n  function tokenName(address token) external view returns (string memory) {\\n    string memory name = callAndParseStringReturn(token, IERC20Metadata.name.selector);\\n    if (bytes(name).length == 0) {\\n      // fallback to full hex of address\\n      return Strings.toHexString(uint256(keccak256(abi.encode(token))), 32);\\n    }\\n    return name;\\n  }\\n}\\n\",\"keccak256\":\"0x9b29530c8143192692a683143e03196c5fcf3276bdeecc4dc75cb5bd7650097b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6107df61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063033b9b4f14610045578063e54f75221461006e575b600080fd5b6100586100533660046105ad565b610081565b60405161006591906106b1565b60405180910390f35b61005861007c3660046105ad565b6100e7565b60606000610096836395d89b4160e01b6100f8565b90508051600014156100e157604080516001600160a01b03851660208201526100da91016040516020818303038152906040528051906020012060001c6020610225565b9392505050565b92915050565b60606000610096836306fdde0360e01b5b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160609160009182916001600160a01b038716916101429190610695565b600060405180830381855afa9150503d806000811461017d576040519150601f19603f3d011682016040523d82523d6000602084013e610182565b606091505b509150915081158061019357508051155b156101b15760405180602001604052806000815250925050506100e1565b8051602014156101e6576000818060200190518101906101d191906105d4565b90506101dc8161040b565b93505050506100e1565b60408151111561020d578080602001905181019061020491906105ec565b925050506100e1565b50506040805160208101909152600081529392505050565b606060006102348360026106fc565b61023f9060026106e4565b67ffffffffffffffff81111561026557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561028f576020820181803683370190505b509050600360fc1b816000815181106102b857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106102f557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006103198460026106fc565b6103249060016106e4565b90505b60018111156103b8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061036657634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061038a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936103b18161074b565b9050610327565b5083156100da5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156104ce57600085826020811061045f57634e487b7160e01b600052603260045260246000fd5b1a60f81b90506001600160f81b03198116156104bb578084848151811061049657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350826104b781610762565b9350505b50806104c681610762565b915050610434565b5060008167ffffffffffffffff8111156104f857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610522576020820181803683370190505b50905060005b828110156105a45783818151811061055057634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b82828151811061057b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061059c81610762565b915050610528565b50949350505050565b6000602082840312156105be578081fd5b81356001600160a01b03811681146100da578182fd5b6000602082840312156105e5578081fd5b5051919050565b6000602082840312156105fd578081fd5b815167ffffffffffffffff80821115610614578283fd5b818401915084601f830112610627578283fd5b81518181111561063957610639610793565b604051601f8201601f19908116603f0116810190838211818310171561066157610661610793565b81604052828152876020848701011115610679578586fd5b61068a83602083016020880161071b565b979650505050505050565b600082516106a781846020870161071b565b9190910192915050565b60208152600082518060208401526106d081604085016020870161071b565b601f01601f19169190910160400192915050565b600082198211156106f7576106f761077d565b500190565b60008160001904831182151516156107165761071661077d565b500290565b60005b8381101561073657818101518382015260200161071e565b83811115610745576000848401525b50505050565b60008161075a5761075a61077d565b506000190190565b60006000198214156107765761077661077d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122093f7d19c2c4827ed686458fa36da1156512a7e26da286b68057e5704bd6733c764736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063033b9b4f14610045578063e54f75221461006e575b600080fd5b6100586100533660046105ad565b610081565b60405161006591906106b1565b60405180910390f35b61005861007c3660046105ad565b6100e7565b60606000610096836395d89b4160e01b6100f8565b90508051600014156100e157604080516001600160a01b03851660208201526100da91016040516020818303038152906040528051906020012060001c6020610225565b9392505050565b92915050565b60606000610096836306fdde0360e01b5b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160609160009182916001600160a01b038716916101429190610695565b600060405180830381855afa9150503d806000811461017d576040519150601f19603f3d011682016040523d82523d6000602084013e610182565b606091505b509150915081158061019357508051155b156101b15760405180602001604052806000815250925050506100e1565b8051602014156101e6576000818060200190518101906101d191906105d4565b90506101dc8161040b565b93505050506100e1565b60408151111561020d578080602001905181019061020491906105ec565b925050506100e1565b50506040805160208101909152600081529392505050565b606060006102348360026106fc565b61023f9060026106e4565b67ffffffffffffffff81111561026557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561028f576020820181803683370190505b509050600360fc1b816000815181106102b857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106102f557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006103198460026106fc565b6103249060016106e4565b90505b60018111156103b8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061036657634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061038a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936103b18161074b565b9050610327565b5083156100da5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156104ce57600085826020811061045f57634e487b7160e01b600052603260045260246000fd5b1a60f81b90506001600160f81b03198116156104bb578084848151811061049657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350826104b781610762565b9350505b50806104c681610762565b915050610434565b5060008167ffffffffffffffff8111156104f857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610522576020820181803683370190505b50905060005b828110156105a45783818151811061055057634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b82828151811061057b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061059c81610762565b915050610528565b50949350505050565b6000602082840312156105be578081fd5b81356001600160a01b03811681146100da578182fd5b6000602082840312156105e5578081fd5b5051919050565b6000602082840312156105fd578081fd5b815167ffffffffffffffff80821115610614578283fd5b818401915084601f830112610627578283fd5b81518181111561063957610639610793565b604051601f8201601f19908116603f0116810190838211818310171561066157610661610793565b81604052828152876020848701011115610679578586fd5b61068a83602083016020880161071b565b979650505050505050565b600082516106a781846020870161071b565b9190910192915050565b60208152600082518060208401526106d081604085016020870161071b565b601f01601f19169190910160400192915050565b600082198211156106f7576106f761077d565b500190565b60008160001904831182151516156107165761071661077d565b500290565b60005b8381101561073657818101518382015260200161071e565b83811115610745576000848401525b50505050565b60008161075a5761075a61077d565b506000190190565b60006000198214156107765761077661077d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122093f7d19c2c4827ed686458fa36da1156512a7e26da286b68057e5704bd6733c764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}