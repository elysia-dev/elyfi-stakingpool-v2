{
  "address": "0xA33cfb48338450AEcc3e7dA69E7F99AC923cfc28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingAsset_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardAsset_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Closed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Emergency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Finished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingNotInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroReward",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardLeft",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "close",
          "type": "bool"
        }
      ],
      "name": "ClosePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "ExtendPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "InitPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "residueAmount",
          "type": "uint256"
        }
      ],
      "name": "RetrieveResidue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "RevokeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "emergency",
          "type": "bool"
        }
      ],
      "name": "SetEmergency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "SetManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "extendPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "initNewPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "renounceManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveResidue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "revokeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stop",
          "type": "bool"
        }
      ],
      "name": "setEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x554534ba697bddc052de1393bd9e813fe0da5b88365c9a433a73a30b87cbbded",
  "receipt": {
    "to": null,
    "from": "0x4B994361257d060cF20dab2F13286B16B0019FdE",
    "contractAddress": "0xA33cfb48338450AEcc3e7dA69E7F99AC923cfc28",
    "transactionIndex": 23,
    "gasUsed": "2820139",
    "logsBloom": "0x
    "blockHash": "0x803960b2b036a25e895ea52e17134241721e459d813e79c97be07ff5fe93b718",
    "transactionHash": "0x554534ba697bddc052de1393bd9e813fe0da5b88365c9a433a73a30b87cbbded",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 14608246,
        "transactionHash": "0x554534ba697bddc052de1393bd9e813fe0da5b88365c9a433a73a30b87cbbded",
        "address": "0xA33cfb48338450AEcc3e7dA69E7F99AC923cfc28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b994361257d060cf20dab2f13286b16b0019fde"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x803960b2b036a25e895ea52e17134241721e459d813e79c97be07ff5fe93b718"
      }
    ],
    "blockNumber": 14608246,
    "cumulativeGasUsed": "3895521",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x727E501dDAbf9AB1888abC5042EF4d0569F0C162",
    "0x4da34f8264cb33a5c9f17081b9ef5ff6091116f4"
  ],
  "solcInputHash": "93563ad6eff3b67983722b3ff0066e11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingAsset_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardAsset_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Closed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Emergency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Finished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"NotEnoughPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReward\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"close\",\"type\":\"bool\"}],\"name\":\"ClosePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"ExtendPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"InitPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"residueAmount\",\"type\":\"uint256\"}],\"name\":\"RetrieveResidue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RevokeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"SetEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"extendPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"initNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"renounceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveResidue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Elysia\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getPoolData()\":{\"returns\":{\"endTimestamp\":\"The end timestamp of the round\",\"lastUpdateTimestamp\":\"The last update timestamp of the round\",\"rewardIndex\":\"The reward index of the round\",\"rewardPerSecond\":\"The total reward accrued per second in the round\",\"startTimestamp\":\"The start timestamp of the round\",\"totalPrincipal\":\"The total staked amount of the round\"}},\"getUserData(address)\":{\"params\":{\"user\":\"The user address\"}},\"getUserReward(address)\":{\"params\":{\"user\":\"The user address\"}},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"initNewPool(uint256,uint256,uint256)\":{\"params\":{\"duration\":\"The duration of the initiated round\",\"rewardPerSecond\":\"The total accrued reward per second in new round\",\"startTimestamp\":\"The start timestamp of initiated round\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount to stake.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\"}}},\"title\":\"Elyfi StakingPool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Allownace not supported\"},\"approve(address,uint256)\":{\"notice\":\"Approval not supported\"},\"claim()\":{\"notice\":\"Transfer accrued reward to msg.sender. User accrued reward will be reset and user reward index will be set to the current reward index.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Allownace not supported\"},\"getPoolData()\":{\"notice\":\"Returns the state and data of the round\"},\"getRewardIndex()\":{\"notice\":\"Returns reward index of the round\"},\"getUserData(address)\":{\"notice\":\"Returns the state and data of the user\"},\"getUserReward(address)\":{\"notice\":\"Returns user accrued reward index of the round\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Allownace not supported\"},\"initNewPool(uint256,uint256,uint256)\":{\"notice\":\"Init the new round. After the round closed, staking is not allowed.\"},\"stake(uint256)\":{\"notice\":\"Stake the amount of staking asset to pool contract and update data.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer not supported\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer not supported\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw the amount of principal from the pool contract and update data\"}},\"notice\":\"Users can stake their asset and earn reward for their staking. The reward calculation is based on the reward index and user balance. The amount of reward index change is inversely proportional to the total amount of supply. Accrued rewards can be obtained by multiplying the difference between the user index and the current index by the user balance. User index and the pool index is updated and aligned with in the staking and withdrawing action.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolV2.sol\":\"StakingPoolV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        return _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x5ededcc80abc4797cdad3c0344c510a6aee060460f3fb8ec5983c4cfaeaef5e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/StakingPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport './libraries/StakingPoolLogicV2.sol';\\nimport './interface/IStakingPoolV2.sol';\\nimport './token/StakedElyfiToken.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/// @title Elyfi StakingPool contract\\n/// @notice Users can stake their asset and earn reward for their staking.\\n/// The reward calculation is based on the reward index and user balance. The amount of reward index change\\n/// is inversely proportional to the total amount of supply. Accrued rewards can be obtained by multiplying\\n/// the difference between the user index and the current index by the user balance. User index and the pool\\n/// index is updated and aligned with in the staking and withdrawing action.\\n/// @author Elysia\\ncontract StakingPoolV2 is IStakingPoolV2, StakedElyfiToken, Ownable {\\n  using StakingPoolLogicV2 for PoolData;\\n\\n  constructor(IERC20 stakingAsset_, IERC20 rewardAsset_) StakedElyfiToken(stakingAsset_) {\\n    stakingAsset = stakingAsset_;\\n    rewardAsset = rewardAsset_;\\n  }\\n\\n  struct PoolData {\\n    uint256 duration;\\n    uint256 rewardPerSecond;\\n    uint256 rewardIndex;\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    uint256 totalPrincipal;\\n    uint256 lastUpdateTimestamp;\\n    mapping(address => uint256) userIndex;\\n    mapping(address => uint256) userReward;\\n    mapping(address => uint256) userPrincipal;\\n    bool isOpened;\\n    bool isFinished;\\n  } \\n\\n  bool internal emergencyStop = false;\\n  mapping(address => bool) managers;\\n  IERC20 public stakingAsset;\\n  IERC20 public rewardAsset;\\n  PoolData internal _poolData;\\n\\n  /***************** View functions ******************/\\n\\n  /// @notice Returns reward index of the round\\n  function getRewardIndex() external view override returns (uint256) {\\n    return _poolData.getRewardIndex();\\n  }\\n\\n  /// @notice Returns user accrued reward index of the round\\n  /// @param user The user address\\n  function getUserReward(address user) external view override returns (uint256) {\\n    return _poolData.getUserReward(user);\\n  }\\n\\n  /// @notice Returns the state and data of the round\\n  /// @return rewardPerSecond The total reward accrued per second in the round\\n  /// @return rewardIndex The reward index of the round\\n  /// @return startTimestamp The start timestamp of the round\\n  /// @return endTimestamp The end timestamp of the round\\n  /// @return totalPrincipal The total staked amount of the round\\n  /// @return lastUpdateTimestamp The last update timestamp of the round\\n  function getPoolData()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 rewardPerSecond,\\n      uint256 rewardIndex,\\n      uint256 startTimestamp,\\n      uint256 endTimestamp,\\n      uint256 totalPrincipal,\\n      uint256 lastUpdateTimestamp\\n    )\\n  {\\n    return (\\n      _poolData.rewardPerSecond,\\n      _poolData.rewardIndex,\\n      _poolData.startTimestamp,\\n      _poolData.endTimestamp,\\n      _poolData.totalPrincipal,\\n      _poolData.lastUpdateTimestamp\\n    );\\n  }\\n\\n  /// @notice Returns the state and data of the user\\n  /// @param user The user address\\n  function getUserData(address user)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 userIndex,\\n      uint256 userReward,\\n      uint256 userPrincipal\\n    )\\n  {\\n    return (_poolData.userIndex[user], _poolData.userReward[user], _poolData.userPrincipal[user]);\\n  }\\n\\n  /***************** External functions ******************/\\n\\n  /// @notice Stake the amount of staking asset to pool contract and update data.\\n  /// @param amount Amount to stake.\\n  function stake(uint256 amount) external override stakingInitiated {\\n    if (_poolData.isOpened == false) revert Closed();\\n    if (amount == 0) revert InvalidAmount();\\n    _poolData.updateStakingPool(msg.sender);\\n    _depositFor(msg.sender, amount);\\n\\n    _poolData.userPrincipal[msg.sender] += amount;\\n    _poolData.totalPrincipal += amount;\\n\\n    emit Stake(\\n      msg.sender,\\n      amount,\\n      _poolData.userIndex[msg.sender],\\n      _poolData.userPrincipal[msg.sender]\\n    );\\n  }\\n\\n  /// @notice Withdraw the amount of principal from the pool contract and update data\\n  /// @param amount Amount to withdraw\\n  function withdraw(uint256 amount) external override stakingInitiated {\\n    _withdraw(amount);\\n  }\\n\\n  /// @notice Transfer accrued reward to msg.sender. User accrued reward will be reset and user reward index will be set to the current reward index.\\n  function claim() external override stakingInitiated {\\n    _claim(msg.sender);\\n  }\\n\\n  // TODO Implement `migrate` function to send an asset to the next staking contract\\n  \\n  /***************** Internal Functions ******************/\\n\\n  function _withdraw(uint256 amount) internal {\\n    uint256 amountToWithdraw = amount;\\n\\n    if (amount == type(uint256).max) {\\n      amountToWithdraw = _poolData.userPrincipal[msg.sender];\\n    }\\n    \\n    if (_poolData.userPrincipal[msg.sender] < amountToWithdraw)\\n      revert NotEnoughPrincipal(_poolData.userPrincipal[msg.sender]);\\n\\n    _poolData.updateStakingPool(msg.sender);\\n\\n    _poolData.userPrincipal[msg.sender] -= amountToWithdraw;\\n    _poolData.totalPrincipal -= amountToWithdraw;\\n\\n    _withdrawTo(msg.sender, amountToWithdraw);\\n\\n    emit Withdraw(\\n      msg.sender,\\n      amountToWithdraw,\\n      _poolData.userIndex[msg.sender],\\n      _poolData.userPrincipal[msg.sender]\\n    );\\n  }\\n\\n  function _claim(address user) internal {\\n    if(emergencyStop == true) revert Emergency();\\n    uint256 reward = _poolData.getUserReward(user);\\n\\n    if (reward == 0) revert ZeroReward();\\n\\n    _poolData.userReward[user] = 0;\\n    _poolData.userIndex[user] = _poolData.getRewardIndex();\\n\\n    SafeERC20.safeTransfer(rewardAsset, user, reward);\\n\\n    uint256 rewardLeft = rewardAsset.balanceOf(address(this));\\n    if (rewardAsset == stakingAsset) {\\n      rewardLeft -= _poolData.totalPrincipal;\\n    }\\n\\n    emit Claim(user, reward, rewardLeft);\\n  }\\n\\n  /***************** Admin Functions ******************/\\n\\n  /// @notice Init the new round. After the round closed, staking is not allowed.\\n  /// @param rewardPerSecond The total accrued reward per second in new round\\n  /// @param startTimestamp The start timestamp of initiated round\\n  /// @param duration The duration of the initiated round\\n  function initNewPool(\\n    uint256 rewardPerSecond,\\n    uint256 startTimestamp,\\n    uint256 duration\\n  ) external override onlyOwner {\\n    if (_poolData.isFinished == true) revert Finished();\\n    (uint256 newRoundStartTimestamp, uint256 newRoundEndTimestamp) = _poolData.initRound(\\n      rewardPerSecond,\\n      startTimestamp,\\n      duration\\n    );\\n    \\n    _poolData.isOpened = true;\\n\\n    emit InitPool(rewardPerSecond, newRoundStartTimestamp, newRoundEndTimestamp);\\n  }\\n\\n  function extendPool(\\n    uint256 rewardPerSecond,\\n    uint256 duration\\n  ) external onlyManager {\\n    _poolData.extendPool(duration);\\n    _poolData.rewardPerSecond = rewardPerSecond;\\n\\n    emit ExtendPool(msg.sender, duration, rewardPerSecond);\\n  }\\n  \\n  function closePool() external onlyOwner {\\n    if (_poolData.isOpened == false) revert Closed();\\n    _poolData.endTimestamp = block.timestamp;\\n    _poolData.isOpened = false;\\n    _poolData.isFinished = true;\\n    emit ClosePool(msg.sender, true);\\n  }\\n\\n  function retrieveResidue() external onlyOwner {\\n    uint256 residueAmount;\\n\\n    if (stakingAsset == rewardAsset) {\\n      residueAmount = rewardAsset.balanceOf(address(this)) - _poolData.totalPrincipal;\\n    } else {\\n      residueAmount = rewardAsset.balanceOf(address(this));\\n    }\\n\\n    SafeERC20.safeTransfer(rewardAsset, msg.sender, residueAmount);\\n    emit RetrieveResidue(msg.sender, residueAmount);\\n  }\\n\\n  function setManager(address addr) external onlyOwner {\\n    _setManager(addr);\\n  }\\n\\n  function revokeManager(address addr) external onlyOwner {\\n    _revokeManager(addr);\\n  }\\n\\n  function renounceManager(address addr) external {\\n    require(addr == msg.sender, \\\"Can only renounce manager for self\\\");\\n    _revokeManager(addr);\\n  }\\n\\n  function setEmergency(bool stop) external onlyOwner {\\n    emergencyStop = stop;\\n    emit SetEmergency(msg.sender, stop);\\n  } \\n\\n  function isManager(address addr) public view returns (bool) {\\n    return managers[addr] || addr == owner();\\n  }\\n\\n  /***************** private ******************/\\n  function _setManager(address addr) private {\\n    if (!isManager(addr)) {\\n      managers[addr] = true;\\n      emit SetManager(msg.sender, addr);\\n    }\\n  }\\n\\n  function _revokeManager(address addr) private {\\n    if (isManager(addr)) {\\n      managers[addr] = false;\\n      emit RevokeManager(msg.sender, addr);\\n    }\\n  }\\n\\n  /***************** Modifier ******************/\\n  modifier onlyManager() {\\n    if (!isManager(msg.sender)) revert OnlyManager();\\n    _;\\n  }\\n\\n  modifier stakingInitiated() {\\n    if (_poolData.startTimestamp == 0) revert StakingNotInitiated();\\n    _;\\n  }\\n}\",\"keccak256\":\"0x4b1c39da9ecb7e3f056c275b1f9b3c9eba378e637189d5fa1097d964dcd48620\",\"license\":\"MIT\"},\"contracts/interface/IStakingPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStakingPoolV2 {\\n  error StakingNotInitiated();\\n  error InvalidAmount();\\n  error ZeroReward();\\n  error OnlyManager();\\n  error NotEnoughPrincipal(uint256 principal);\\n  error ZeroPrincipal();\\n  error Finished();\\n  error Closed();\\n  error Emergency();\\n\\n  event Stake(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userIndex,\\n    uint256 userPrincipal\\n  );\\n\\n  event Withdraw(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userIndex,\\n    uint256 userPrincipal\\n  );\\n\\n  event Claim(address indexed user, uint256 reward, uint256 rewardLeft);\\n\\n  event InitPool(\\n    uint256 rewardPerSecond,\\n    uint256 startTimestamp,\\n    uint256 endTimestamp\\n  );\\n\\n  event ExtendPool(\\n    address indexed manager,\\n    uint256 duration,\\n    uint256 rewardPerSecond\\n  );\\n\\n  event ClosePool(address admin, bool close);\\n\\n  event RetrieveResidue(address manager, uint256 residueAmount);\\n\\n  event SetManager(address admin, address manager);\\n\\n  /// @param requester owner or the manager himself/herself\\n  event RevokeManager(address requester, address manager);\\n\\n  event SetEmergency(address admin, bool emergency);\\n\\n  function stake(uint256 amount) external;\\n\\n  function claim() external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getRewardIndex() external view returns (uint256);\\n\\n  function getUserReward(address user) external view returns (uint256);\\n\\n  function getPoolData()\\n    external\\n    view\\n    returns (\\n      uint256 rewardPerSecond,\\n      uint256 rewardIndex,\\n      uint256 startTimestamp,\\n      uint256 endTimestamp,\\n      uint256 totalPrincipal,\\n      uint256 lastUpdateTimestamp\\n    );\\n\\n  function getUserData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 userIndex,\\n      uint256 userReward,\\n      uint256 userPrincipal\\n    );\\n\\n  function initNewPool(\\n    uint256 rewardPerSecond,\\n    uint256 startTimestamp,\\n    uint256 duration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x91cfc324025d137fb02d649ff2e7db35138218495e8c7aea79b71d500621ad3e\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary ERC20Metadata {\\n  function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n    bytes memory bytesString = new bytes(32);\\n    uint256 charCount = 0;\\n    for (uint256 j = 0; j < 32; j++) {\\n      bytes1 char = x[j];\\n      if (char != 0) {\\n        bytesString[charCount] = char;\\n        charCount++;\\n      }\\n    }\\n    bytes memory bytesStringTrimmed = new bytes(charCount);\\n    for (uint256 j = 0; j < charCount; j++) {\\n      bytesStringTrimmed[j] = bytesString[j];\\n    }\\n    return string(bytesStringTrimmed);\\n  }\\n\\n  // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n  function callAndParseStringReturn(address token, bytes4 selector)\\n    private\\n    view\\n    returns (string memory)\\n  {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n    // if not implemented, or returns empty data, return empty string\\n    if (!success || data.length == 0) {\\n      return '';\\n    }\\n    // bytes32 data always has length 32\\n    if (data.length == 32) {\\n      bytes32 decoded = abi.decode(data, (bytes32));\\n      return bytes32ToString(decoded);\\n    } else if (data.length > 64) {\\n      return abi.decode(data, (string));\\n    }\\n    return '';\\n  }\\n\\n  // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n  function tokenSymbol(address token) external view returns (string memory) {\\n    string memory symbol = callAndParseStringReturn(token, IERC20Metadata.symbol.selector);\\n    if (bytes(symbol).length == 0) {\\n      // fallback to 6 uppercase hex of address\\n      return Strings.toHexString(uint256(keccak256(abi.encode(token))), 32);\\n    }\\n    return symbol;\\n  }\\n\\n  // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n  function tokenName(address token) external view returns (string memory) {\\n    string memory name = callAndParseStringReturn(token, IERC20Metadata.name.selector);\\n    if (bytes(name).length == 0) {\\n      // fallback to full hex of address\\n      return Strings.toHexString(uint256(keccak256(abi.encode(token))), 32);\\n    }\\n    return name;\\n  }\\n}\\n\",\"keccak256\":\"0x9b29530c8143192692a683143e03196c5fcf3276bdeecc4dc75cb5bd7650097b\",\"license\":\"MIT\"},\"contracts/libraries/StakingPoolLogicV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '../StakingPoolV2.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nlibrary StakingPoolLogicV2 {\\n  using StakingPoolLogicV2 for StakingPoolV2.PoolData;\\n\\n  event UpdateStakingPool(\\n    address indexed user,\\n    uint256 newRewardIndex,\\n    uint256 totalPrincipal\\n  );\\n\\n  function getRewardIndex(StakingPoolV2.PoolData storage poolData) internal view returns (uint256) {\\n    uint256 currentTimestamp = block.timestamp < poolData.endTimestamp\\n      ? block.timestamp\\n      : poolData.endTimestamp;\\n    uint256 timeDiff = currentTimestamp - poolData.lastUpdateTimestamp;\\n    uint256 totalPrincipal = poolData.totalPrincipal;\\n\\n    if (timeDiff == 0) {\\n      return poolData.rewardIndex;\\n    }\\n\\n    if (totalPrincipal == 0) {\\n      return poolData.rewardIndex;\\n    }\\n\\n    uint256 rewardIndexDiff = (timeDiff * poolData.rewardPerSecond * 1e9) / totalPrincipal;\\n    return poolData.rewardIndex + rewardIndexDiff;\\n  }\\n\\n  function getUserReward(StakingPoolV2.PoolData storage poolData, address user)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    if (poolData.userIndex[user] == 0) {\\n      return 0;\\n    }\\n    uint256 indexDiff = getRewardIndex(poolData) - poolData.userIndex[user];\\n    uint256 balance = poolData.userPrincipal[user];\\n    uint256 result = poolData.userReward[user] + (balance * indexDiff) / 1e9;\\n    return result;\\n  }\\n\\n  function updateStakingPool(\\n    StakingPoolV2.PoolData storage poolData,\\n    address user\\n  ) internal {\\n    poolData.userReward[user] = getUserReward(poolData, user);\\n    poolData.rewardIndex = poolData.userIndex[user] = getRewardIndex(poolData);\\n    poolData.lastUpdateTimestamp = block.timestamp < poolData.endTimestamp\\n      ? block.timestamp\\n      : poolData.endTimestamp;\\n    emit UpdateStakingPool(msg.sender, poolData.rewardIndex, poolData.totalPrincipal);\\n  }\\n\\n  function extendPool(\\n    StakingPoolV2.PoolData storage poolData,\\n    uint256 duration\\n  ) internal {\\n    poolData.rewardIndex = getRewardIndex(poolData);\\n    poolData.startTimestamp = poolData.lastUpdateTimestamp = block.timestamp;\\n    poolData.endTimestamp = block.timestamp + duration;\\n  }\\n\\n  function initRound(\\n    StakingPoolV2.PoolData storage poolData,\\n    uint256 rewardPerSecond,\\n    uint256 roundStartTimestamp,\\n    uint256 duration\\n  ) internal returns (uint256, uint256) {\\n    poolData.rewardPerSecond = rewardPerSecond;\\n    poolData.startTimestamp = roundStartTimestamp;\\n    poolData.endTimestamp = roundStartTimestamp + duration;\\n    poolData.lastUpdateTimestamp = roundStartTimestamp;\\n    poolData.rewardIndex = 1e18;\\n\\n    return (poolData.startTimestamp, poolData.endTimestamp);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xda11c6eae3759c81af285d8361118d2b74a1cb364b7a2dc8427dbc79a19fbde6\",\"license\":\"MIT\"},\"contracts/token/StakedElyfiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol';\\nimport '../libraries/ERC20Metadata.sol';\\n\\ncontract StakedElyfiToken is ERC20, ERC20Permit, ERC20Votes {\\n  IERC20 public immutable underlying;\\n\\n  constructor(IERC20 underlyingToken)\\n    ERC20(\\n      string(\\n        abi.encodePacked(\\n          'Staked',\\n          ERC20Metadata.tokenName(address(underlyingToken))\\n        )\\n      ),\\n      string(\\n        abi.encodePacked(\\n          's',\\n          ERC20Metadata.tokenSymbol(address(underlyingToken))\\n        )\\n      )\\n    )\\n    ERC20Permit(\\n      string(\\n        abi.encodePacked(\\n          'Staked',\\n          ERC20Metadata.tokenName(address(underlyingToken))\\n        )\\n      )\\n    )\\n  {\\n    underlying = underlyingToken;\\n  }\\n\\n  /// @notice Transfer not supported\\n  function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override(ERC20)\\n    returns (bool)\\n  {\\n    recipient;\\n    amount;\\n    revert();\\n  }\\n\\n  /// @notice Transfer not supported\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override(ERC20) returns (bool) {\\n    sender;\\n    recipient;\\n    amount;\\n    revert();\\n  }\\n\\n  /// @notice Approval not supported\\n  function approve(address spender, uint256 amount) public virtual override(ERC20) returns (bool) {\\n    spender;\\n    amount;\\n    revert();\\n  }\\n\\n  /// @notice Allownace not supported\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override(ERC20)\\n    returns (uint256)\\n  {\\n    owner;\\n    spender;\\n    revert();\\n  }\\n\\n  /// @notice Allownace not supported\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    override(ERC20)\\n    returns (bool)\\n  {\\n    spender;\\n    addedValue;\\n    revert();\\n  }\\n\\n  /// @notice Allownace not supported\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    override(ERC20)\\n    returns (bool)\\n  {\\n    spender;\\n    subtractedValue;\\n    revert();\\n  }\\n\\n  /// @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\\n  /// @notice This function is based on the openzeppelin ERC20Wrapper\\n  function _depositFor(address account, uint256 amount) internal virtual returns (bool) {\\n    SafeERC20.safeTransferFrom(underlying, _msgSender(), address(this), amount);\\n    _mint(account, amount);\\n    return true;\\n  }\\n\\n  /// @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\\n  /// @notice This function is based on the openzeppelin ERC20Wrapper\\n  function _withdrawTo(address account, uint256 amount) internal virtual returns (bool) {\\n    _burn(_msgSender(), amount);\\n    SafeERC20.safeTransfer(underlying, account, amount);\\n    return true;\\n  }\\n\\n  /// @notice The following functions are overrides required by Solidity.\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override(ERC20, ERC20Votes) {\\n    super._afterTokenTransfer(from, to, amount);\\n  }\\n\\n  /// @notice The following functions are overrides required by Solidity.\\n  function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {\\n    super._mint(to, amount);\\n  }\\n\\n  /// @notice The following functions are overrides required by Solidity.\\n  function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\\n    super._burn(account, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x9e9d161db77414f895fb176cdec963934335b04512b298913ae3c5f7eb7ea424\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120526009805460ff60a01b191690553480156200004457600080fd5b5060405162003634380380620036348339810160408190526200006791620004bf565b6040516372a7ba9160e11b81526001600160a01b0383166004820152829073C10B6DAFE4D7F7c693F44C51E716166B599644Ba9063e54f75229060240160006040518083038186803b158015620000bd57600080fd5b505af4158015620000d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000fc9190810190620004f6565b6040516020016200010e9190620005aa565b60408051808303601f19018152828201825260018352603160f81b602084015290516372a7ba9160e11b81526001600160a01b03841660048201529091829173C10B6DAFE4D7F7c693F44C51E716166B599644Ba9063e54f75229060240160006040518083038186803b1580156200018557600080fd5b505af41580156200019a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001c49190810190620004f6565b604051602001620001d69190620005aa565b60408051808303601f190181529082905263033b9b4f60e01b82526001600160a01b03861660048301529073C10B6DAFE4D7F7c693F44C51E716166B599644Ba9063033b9b4f9060240160006040518083038186803b1580156200023957600080fd5b505af41580156200024e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002789190810190620004f6565b6040516020016200028a9190620005da565b60408051601f198184030181529190528151620002af906003906020850190620003fc565b508051620002c5906004906020840190620003fc565b5050825160208085019190912083518483012060c082815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81890181905281830188905260608201879052608082019490945230818401528151808203909301835290930190925281519190940120919350919060805261010052505050505060601b6001600160601b0319166101405262000378620003723390565b620003aa565b600b80546001600160a01b039384166001600160a01b031991821617909155600c80549290931691161790556200068b565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200040a9062000638565b90600052602060002090601f0160209004810192826200042e576000855562000479565b82601f106200044957805160ff191683800117855562000479565b8280016001018555821562000479579182015b82811115620004795782518255916020019190600101906200045c565b50620004879291506200048b565b5090565b5b808211156200048757600081556001016200048c565b80516001600160a01b0381168114620004ba57600080fd5b919050565b60008060408385031215620004d2578182fd5b620004dd83620004a2565b9150620004ed60208401620004a2565b90509250929050565b60006020828403121562000508578081fd5b81516001600160401b03808211156200051f578283fd5b818401915084601f83011262000533578283fd5b81518181111562000548576200054862000675565b604051601f8201601f19908116603f0116810190838211818310171562000573576200057362000675565b816040528281528760208487010111156200058c578586fd5b6200059f83602083016020880162000605565b979650505050505050565b6514dd185ad95960d21b815260008251620005cd81600685016020870162000605565b9190910160060192915050565b607360f81b815260008251620005f881600185016020870162000605565b9190910160010192915050565b60005b838110156200062257818101518382015260200162000608565b8381111562000632576000848401525b50505050565b600181811c908216806200064d57607f821691505b602082108114156200066f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516101405160601c612f3d620006f7600039600081816103d101528181611a040152611e7901526000610ffb015260006114d201526000611514015260006114f301526000611482015260006114ab0152612f3d6000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80637ecebe0011610151578063c75ebb82116100c3578063f1127ed811610087578063f1127ed81461054c578063f21c150c14610589578063f2fde38b14610591578063f3ae2415146105a4578063fb29238b146105b7578063ffc9896b146105f657600080fd5b8063c75ebb82146104f2578063d0ebdbe714610505578063d505accf14610518578063dd62ed3e1461052b578063ede524941461053957600080fd5b8063a457c2d711610115578063a457c2d7146102ac578063a694fc3a146104b1578063a9059cbb146102ac578063ae997d70146104c4578063b711c5bc146104d7578063c3cda520146104df57600080fd5b80637ecebe001461045f5780638da5cb5b146104725780638e539e8c1461048357806395d89b41146104965780639ab24eb01461049e57600080fd5b806339509351116101ea57806366805de5116101ae57806366805de5146103c45780636f307dc3146103cc5780636fcfff45146103f357806370a082311461041b578063715018a6146104445780637776768f1461044c57600080fd5b806339509351146102ac5780633a46b1a81461036a5780634e71d92d1461037d578063587cde1e146103855780635c19a95c146103b157600080fd5b806323b872dd1161023c57806323b872dd1461030c5780632e1a7d4d1461031a578063313ce5671461032d5780633276a60f1461033c5780633644e5151461034f578063377e32e61461035757600080fd5b80630501d5561461027957806306fdde031461028e578063095ea7b3146102ac5780630ac6702a146102cf57806318160ddd146102fa575b600080fd5b61028c610287366004612cdc565b610651565b005b6102966106df565b6040516102a39190612dac565b60405180910390f35b6102bf6102ba366004612c1e565b610771565b60405190151581526020016102a3565b600c546102e2906001600160a01b031681565b6040516001600160a01b0390911681526020016102a3565b6002545b6040519081526020016102a3565b6102bf6102ba366004612b7a565b61028c610328366004612d14565b610777565b604051601281526020016102a3565b61028c61034a366004612d44565b6107a3565b6102fe610819565b61028c610365366004612b2e565b610828565b6102fe610378366004612c1e565b61085b565b61028c6108d7565b6102e2610393366004612b2e565b6001600160a01b039081166000908152600660205260409020541690565b61028c6103bf366004612b2e565b610902565b61028c61090c565b6102e27f000000000000000000000000000000000000000000000000000000000000000081565b610406610401366004612b2e565b6109a7565b60405163ffffffff90911681526020016102a3565b6102fe610429366004612b2e565b6001600160a01b031660009081526020819052604090205490565b61028c6109c9565b600b546102e2906001600160a01b031681565b6102fe61046d366004612b2e565b6109fd565b6009546001600160a01b03166102e2565b6102fe610491366004612d14565b610a1b565b610296610a77565b6102fe6104ac366004612b2e565b610a86565b61028c6104bf366004612d14565b610b1b565b61028c6104d2366004612b2e565b610c2e565b61028c610c91565b61028c6104ed366004612c47565b610e31565b6102fe610500366004612b2e565b610f67565b61028c610513366004612b2e565b610f74565b61028c610526366004612bb5565b610fa7565b6102fe6102ba366004612b48565b61028c610547366004612d65565b61110b565b61055f61055a366004612c9e565b6111ce565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016102a3565b6102fe611260565b61028c61059f366004612b2e565b61126c565b6102bf6105b2366004612b2e565b611304565b600e54600f54601054601154601254601354604080519687526020870195909552938501929092526060840152608083015260a082015260c0016102a3565b610636610604366004612b2e565b6001600160a01b0316600090815260146020908152604080832054601583528184205460169093529220549192909190565b604080519384526020840192909252908201526060016102a3565b6009546001600160a01b031633146106845760405162461bcd60e51b815260040161067b90612ddf565b60405180910390fd5b6009805460ff60a01b1916600160a01b831515908102919091179091556040805133815260208101929092527fef4f29489278bb948f2bf4c4b43ecf63d320bd27e96bca0566354fdfbad96fb691015b60405180910390a150565b6060600380546106ee90612eae565b80601f016020809104026020016040519081016040528092919081815260200182805461071a90612eae565b80156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b5050505050905090565b60008080fd5b601054610797576040516350f7da1560e11b815260040160405180910390fd5b6107a08161133b565b50565b6107ac33611304565b6107c95760405163605919ad60e11b815260040160405180910390fd5b6107d4600d8261144a565b600e829055604080518281526020810184905233917fc46f77f1cc704db24b96e89a9b0a7cf01f40697fd66498005bf9a01eee48bb6491015b60405180910390a25050565b600061082361147e565b905090565b6009546001600160a01b031633146108525760405162461bcd60e51b815260040161067b90612ddf565b6107a081611538565b60004382106108ac5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161067b565b6001600160a01b03831660009081526007602052604090206108ce908361159e565b90505b92915050565b6010546108f7576040516350f7da1560e11b815260040160405180910390fd5b61090033611677565b565b6107a03382611814565b6009546001600160a01b031633146109365760405162461bcd60e51b815260040161067b90612ddf565b60175460ff1661095957604051631cdde67b60e01b815260040160405180910390fd5b426011556017805461ffff191661010017905560408051338152600160208201527fd7db87a6b8aa22d17ca92ea752962946b1ee14c9c1755604a056418d3ad97d1c910160405180910390a1565b6001600160a01b0381166000908152600760205260408120546108d190611893565b6009546001600160a01b031633146109f35760405162461bcd60e51b815260040161067b90612ddf565b61090060006118fc565b6001600160a01b0381166000908152600560205260408120546108d1565b6000438210610a6c5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161067b565b6108d160088361159e565b6060600480546106ee90612eae565b6001600160a01b0381166000908152600760205260408120548015610b08576001600160a01b0383166000908152600760205260409020610ac8600183612e6b565b81548110610ae657634e487b7160e01b600052603260045260246000fd5b60009182526020909120015464010000000090046001600160e01b0316610b0b565b60005b6001600160e01b03169392505050565b601054610b3b576040516350f7da1560e11b815260040160405180910390fd5b60175460ff16610b5e57604051631cdde67b60e01b815260040160405180910390fd5b80610b7c5760405163162908e360e11b815260040160405180910390fd5b610b87600d3361194e565b610b9133826119fd565b503360009081526016602052604081208054839290610bb1908490612e14565b909155505060128054829190600090610bcb908490612e14565b9091555050336000818152601460209081526040808320546016835292819020548151868152928301939093528101919091527ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c4469060600160405180910390a250565b6001600160a01b03811633146108525760405162461bcd60e51b815260206004820152602260248201527f43616e206f6e6c792072656e6f756e6365206d616e6167657220666f72207365604482015261363360f11b606482015260840161067b565b6009546001600160a01b03163314610cbb5760405162461bcd60e51b815260040161067b90612ddf565b600c54600b546000916001600160a01b0391821691161415610d6657601254600c546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d559190612d2c565b610d5f9190612e6b565b9050610de4565b600c546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612d2c565b90505b600c54610dfb906001600160a01b03163383611a3e565b60408051338152602081018390527f40a999c547e777925d554a2673d8e2a2c0788390a91a9836f59b2d893e85034891016106d4565b83421115610e815760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161067b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610efb90610ef39060a00160405160208183030381529060405280519060200120611aa6565b858585611af4565b9050610f0681611b1c565b8614610f545760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161067b565b610f5e8188611814565b50505050505050565b60006108d1600d83611b44565b6009546001600160a01b03163314610f9e5760405162461bcd60e51b815260040161067b90612ddf565b6107a081611bff565b83421115610ff75760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161067b565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110268c611b1c565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061108182611aa6565b9050600061109182878787611af4565b9050896001600160a01b0316816001600160a01b0316146110f45760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161067b565b6110ff8a8a8a611c67565b50505050505050505050565b6009546001600160a01b031633146111355760405162461bcd60e51b815260040161067b90612ddf565b60175460ff6101009091041615156001141561116457604051631578538d60e01b815260040160405180910390fd5b600080611174600d868686611d8b565b6017805460ff19166001179055604080518881526020810184905290810182905291935091507f81fd1d59cc9507125b21e058eb609385cb7fffe3650dc38f983aa3c777f3f7b89060600160405180910390a15050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff841690811061122057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6000610823600d611dd5565b6009546001600160a01b031633146112965760405162461bcd60e51b815260040161067b90612ddf565b6001600160a01b0381166112fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161067b565b6107a0816118fc565b6001600160a01b0381166000908152600a602052604081205460ff16806108d15750506009546001600160a01b0391821691161490565b806000198114156113585750336000908152601660205260409020545b3360009081526016602052604090205481111561139d57336000908152601660205260409081902054905163cebd519360e01b8152600481019190915260240161067b565b6113a8600d3361194e565b33600090815260166020526040812080548392906113c7908490612e6b565b9091555050601280548291906000906113e1908490612e6b565b909155506113f190503382611e68565b50336000818152601460209081526040808320546016835292819020548151868152928301939093528101919091527f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600161080d565b61145382611dd5565b6002830155426006830181905560038301819055611472908290612e14565b82600401819055505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156114cd57507f000000000000000000000000000000000000000000000000000000000000000090565b6108237f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e9f565b61154181611304565b156107a0576001600160a01b0381166000818152600a6020908152604091829020805460ff191690558151338152908101929092527f142c2a791096690a19ea18712757698bee1e23180c084e221726a4a96e027a7b91016106d4565b8154600090815b818110156116105760006115b98284611ee9565b9050848682815481106115dc57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015463ffffffff1611156115fc5780925061160a565b611607816001612e14565b91505b506115a5565b81156116625784611622600184612e6b565b8154811061164057634e487b7160e01b600052603260045260246000fd5b60009182526020909120015464010000000090046001600160e01b0316611665565b60005b6001600160e01b031695945050505050565b600954600160a01b900460ff161515600114156116a75760405163358bc0db60e11b815260040160405180910390fd5b60006116b4600d83611b44565b9050806116d457604051632706c9e160e21b815260040160405180910390fd5b6001600160a01b0382166000908152601560205260408120556116f7600d611dd5565b6001600160a01b03808416600090815260146020526040902091909155600c5461172391168383611a3e565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561176757600080fd5b505afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f9190612d2c565b600b54600c549192506001600160a01b03918216911614156117cb576012546117c89082612e6b565b90505b60408051838152602081018390526001600160a01b038516917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7910160405180910390a2505050565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a461188d828483611f04565b50505050565b600063ffffffff8211156118f85760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161067b565b5090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6119588282611b44565b6001600160a01b038216600090815260088401602052604090205561197c82611dd5565b6001600160a01b038216600090815260078401602052604090208190556002830155600482015442106119b35781600401546119b5565b425b60068301556002820154600583015460405133927f28a694a51ab9a1b640ac10c5bff2e688efea56c330c01ac8eb9318aa2cd09fdf9261080d92918252602082015260400190565b6000611a2b7f0000000000000000000000000000000000000000000000000000000000000000333085612041565b611a358383612079565b50600192915050565b6040516001600160a01b038316602482015260448101829052611aa190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612087565b505050565b60006108d1611ab361147e565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b0587878787612159565b91509150611b1281612243565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6001600160a01b0381166000908152600783016020526040812054611b6b575060006108d1565b6001600160a01b0382166000908152600784016020526040812054611b8f85611dd5565b611b999190612e6b565b6001600160a01b0384166000908152600986016020526040812054919250633b9aca00611bc68484612e4c565b611bd09190612e2c565b6001600160a01b0386166000908152600888016020526040902054611bf59190612e14565b9695505050505050565b611c0881611304565b6107a0576001600160a01b0381166000818152600a6020908152604091829020805460ff191660011790558151338152908101929092527f8d235c6c97ff1b07a41b6b8ac6ea040a6a6b411b20a0f02f02946fa45590bcfc91016106d4565b6001600160a01b038316611cc95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161067b565b6001600160a01b038216611d2a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161067b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001840183905560038401829055600080611da68385612e14565b6004870181905560068701859055670de0b6b3a764000060028801556003870154925090505b94509492505050565b60008082600401544210611ded578260040154611def565b425b90506000836006015482611e039190612e6b565b600585015490915081611e1b57505050506002015490565b80611e2b57505050506002015490565b600081866001015484611e3e9190612e4c565b611e4c90633b9aca00612e4c565b611e569190612e2c565b9050808660020154611bf59190612e14565b6000611e743383612444565b611a357f00000000000000000000000000000000000000000000000000000000000000008484611a3e565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090505b9392505050565b6000611ef86002848418612e2c565b6108ce90848416612e14565b816001600160a01b0316836001600160a01b031614158015611f265750600081115b15611aa1576001600160a01b03831615611fb4576001600160a01b03831660009081526007602052604081208190611f619061244e8561245a565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611fa9929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611aa1576001600160a01b03821660009081526007602052604081208190611fea906125fd8561245a565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612032929190918252602082015260400190565b60405180910390a25050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261188d9085906323b872dd60e01b90608401611a6a565b6120838282612609565b5050565b60006120dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126939092919063ffffffff16565b805190915015611aa157808060200190518101906120fa9190612cf8565b611aa15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121905750600090506003611dcc565b8460ff16601b141580156121a857508460ff16601c14155b156121b95750600090506004611dcc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561220d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661223657600060019250925050611dcc565b9660009650945050505050565b600081600481111561226557634e487b7160e01b600052602160045260246000fd5b141561226e5750565b600181600481111561229057634e487b7160e01b600052602160045260246000fd5b14156122de5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161067b565b600281600481111561230057634e487b7160e01b600052602160045260246000fd5b141561234e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161067b565b600381600481111561237057634e487b7160e01b600052602160045260246000fd5b14156123c95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161067b565b60048160048111156123eb57634e487b7160e01b600052602160045260246000fd5b14156107a05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161067b565b61208382826126aa565b60006108ce8284612e6b565b8254600090819080156124b35785612473600183612e6b565b8154811061249157634e487b7160e01b600052603260045260246000fd5b60009182526020909120015464010000000090046001600160e01b03166124b6565b60005b6001600160e01b031692506124cf83858763ffffffff16565b915060008111801561251b575043866124e9600184612e6b565b8154811061250757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015463ffffffff16145b1561258957612529826126c2565b86612535600184612e6b565b8154811061255357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506125f4565b85604051806040016040528061259e43611893565b63ffffffff1681526020016125b2856126c2565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b60006108ce8284612e14565b612613828261272b565b6002546001600160e01b0310156126855760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161067b565b61188d60086125fd8361245a565b60606126a28484600085612812565b949350505050565b6126b4828261293a565b61188d600861244e8361245a565b60006001600160e01b038211156118f85760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161067b565b6001600160a01b0382166127815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161067b565b80600260008282546127939190612e14565b90915550506001600160a01b038216600090815260208190526040812080548392906127c0908490612e14565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361208360008383612a8b565b6060824710156128735760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161067b565b843b6128c15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067b565b600080866001600160a01b031685876040516128dd9190612d90565b60006040518083038185875af1925050503d806000811461291a576040519150601f19603f3d011682016040523d82523d6000602084013e61291f565b606091505b509150915061292f828286612a96565b979650505050505050565b6001600160a01b03821661299a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161067b565b6001600160a01b03821660009081526020819052604090205481811015612a0e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161067b565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612a3d908490612e6b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611aa1836000845b611aa1838383612acf565b60608315612aa5575081611ee2565b825115612ab55782518084602001fd5b8160405162461bcd60e51b815260040161067b9190612dac565b6001600160a01b03838116600090815260066020526040808220548584168352912054611aa192918216911683611f04565b80356001600160a01b0381168114612b1857600080fd5b919050565b803560ff81168114612b1857600080fd5b600060208284031215612b3f578081fd5b6108ce82612b01565b60008060408385031215612b5a578081fd5b612b6383612b01565b9150612b7160208401612b01565b90509250929050565b600080600060608486031215612b8e578081fd5b612b9784612b01565b9250612ba560208501612b01565b9150604084013590509250925092565b600080600080600080600060e0888a031215612bcf578283fd5b612bd888612b01565b9650612be660208901612b01565b95506040880135945060608801359350612c0260808901612b1d565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612c30578182fd5b612c3983612b01565b946020939093013593505050565b60008060008060008060c08789031215612c5f578182fd5b612c6887612b01565b95506020870135945060408701359350612c8460608801612b1d565b92506080870135915060a087013590509295509295509295565b60008060408385031215612cb0578182fd5b612cb983612b01565b9150602083013563ffffffff81168114612cd1578182fd5b809150509250929050565b600060208284031215612ced578081fd5b8135611ee281612ef9565b600060208284031215612d09578081fd5b8151611ee281612ef9565b600060208284031215612d25578081fd5b5035919050565b600060208284031215612d3d578081fd5b5051919050565b60008060408385031215612d56578182fd5b50508035926020909101359150565b600080600060608486031215612d79578283fd5b505081359360208301359350604090920135919050565b60008251612da2818460208701612e82565b9190910192915050565b6020815260008251806020840152612dcb816040850160208701612e82565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612e2757612e27612ee3565b500190565b600082612e4757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612e6657612e66612ee3565b500290565b600082821015612e7d57612e7d612ee3565b500390565b60005b83811015612e9d578181015183820152602001612e85565b8381111561188d5750506000910152565b600181811c90821680612ec257607f821691505b60208210811415611b3e57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80151581146107a057600080fdfea2646970667358221220f4d88d9bf30a76d9c1906216e6e1165f97b2464ecbe920c26d9e1649df857cb264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80637ecebe0011610151578063c75ebb82116100c3578063f1127ed811610087578063f1127ed81461054c578063f21c150c14610589578063f2fde38b14610591578063f3ae2415146105a4578063fb29238b146105b7578063ffc9896b146105f657600080fd5b8063c75ebb82146104f2578063d0ebdbe714610505578063d505accf14610518578063dd62ed3e1461052b578063ede524941461053957600080fd5b8063a457c2d711610115578063a457c2d7146102ac578063a694fc3a146104b1578063a9059cbb146102ac578063ae997d70146104c4578063b711c5bc146104d7578063c3cda520146104df57600080fd5b80637ecebe001461045f5780638da5cb5b146104725780638e539e8c1461048357806395d89b41146104965780639ab24eb01461049e57600080fd5b806339509351116101ea57806366805de5116101ae57806366805de5146103c45780636f307dc3146103cc5780636fcfff45146103f357806370a082311461041b578063715018a6146104445780637776768f1461044c57600080fd5b806339509351146102ac5780633a46b1a81461036a5780634e71d92d1461037d578063587cde1e146103855780635c19a95c146103b157600080fd5b806323b872dd1161023c57806323b872dd1461030c5780632e1a7d4d1461031a578063313ce5671461032d5780633276a60f1461033c5780633644e5151461034f578063377e32e61461035757600080fd5b80630501d5561461027957806306fdde031461028e578063095ea7b3146102ac5780630ac6702a146102cf57806318160ddd146102fa575b600080fd5b61028c610287366004612cdc565b610651565b005b6102966106df565b6040516102a39190612dac565b60405180910390f35b6102bf6102ba366004612c1e565b610771565b60405190151581526020016102a3565b600c546102e2906001600160a01b031681565b6040516001600160a01b0390911681526020016102a3565b6002545b6040519081526020016102a3565b6102bf6102ba366004612b7a565b61028c610328366004612d14565b610777565b604051601281526020016102a3565b61028c61034a366004612d44565b6107a3565b6102fe610819565b61028c610365366004612b2e565b610828565b6102fe610378366004612c1e565b61085b565b61028c6108d7565b6102e2610393366004612b2e565b6001600160a01b039081166000908152600660205260409020541690565b61028c6103bf366004612b2e565b610902565b61028c61090c565b6102e27f000000000000000000000000000000000000000000000000000000000000000081565b610406610401366004612b2e565b6109a7565b60405163ffffffff90911681526020016102a3565b6102fe610429366004612b2e565b6001600160a01b031660009081526020819052604090205490565b61028c6109c9565b600b546102e2906001600160a01b031681565b6102fe61046d366004612b2e565b6109fd565b6009546001600160a01b03166102e2565b6102fe610491366004612d14565b610a1b565b610296610a77565b6102fe6104ac366004612b2e565b610a86565b61028c6104bf366004612d14565b610b1b565b61028c6104d2366004612b2e565b610c2e565b61028c610c91565b61028c6104ed366004612c47565b610e31565b6102fe610500366004612b2e565b610f67565b61028c610513366004612b2e565b610f74565b61028c610526366004612bb5565b610fa7565b6102fe6102ba366004612b48565b61028c610547366004612d65565b61110b565b61055f61055a366004612c9e565b6111ce565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016102a3565b6102fe611260565b61028c61059f366004612b2e565b61126c565b6102bf6105b2366004612b2e565b611304565b600e54600f54601054601154601254601354604080519687526020870195909552938501929092526060840152608083015260a082015260c0016102a3565b610636610604366004612b2e565b6001600160a01b0316600090815260146020908152604080832054601583528184205460169093529220549192909190565b604080519384526020840192909252908201526060016102a3565b6009546001600160a01b031633146106845760405162461bcd60e51b815260040161067b90612ddf565b60405180910390fd5b6009805460ff60a01b1916600160a01b831515908102919091179091556040805133815260208101929092527fef4f29489278bb948f2bf4c4b43ecf63d320bd27e96bca0566354fdfbad96fb691015b60405180910390a150565b6060600380546106ee90612eae565b80601f016020809104026020016040519081016040528092919081815260200182805461071a90612eae565b80156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b5050505050905090565b60008080fd5b601054610797576040516350f7da1560e11b815260040160405180910390fd5b6107a08161133b565b50565b6107ac33611304565b6107c95760405163605919ad60e11b815260040160405180910390fd5b6107d4600d8261144a565b600e829055604080518281526020810184905233917fc46f77f1cc704db24b96e89a9b0a7cf01f40697fd66498005bf9a01eee48bb6491015b60405180910390a25050565b600061082361147e565b905090565b6009546001600160a01b031633146108525760405162461bcd60e51b815260040161067b90612ddf565b6107a081611538565b60004382106108ac5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161067b565b6001600160a01b03831660009081526007602052604090206108ce908361159e565b90505b92915050565b6010546108f7576040516350f7da1560e11b815260040160405180910390fd5b61090033611677565b565b6107a03382611814565b6009546001600160a01b031633146109365760405162461bcd60e51b815260040161067b90612ddf565b60175460ff1661095957604051631cdde67b60e01b815260040160405180910390fd5b426011556017805461ffff191661010017905560408051338152600160208201527fd7db87a6b8aa22d17ca92ea752962946b1ee14c9c1755604a056418d3ad97d1c910160405180910390a1565b6001600160a01b0381166000908152600760205260408120546108d190611893565b6009546001600160a01b031633146109f35760405162461bcd60e51b815260040161067b90612ddf565b61090060006118fc565b6001600160a01b0381166000908152600560205260408120546108d1565b6000438210610a6c5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161067b565b6108d160088361159e565b6060600480546106ee90612eae565b6001600160a01b0381166000908152600760205260408120548015610b08576001600160a01b0383166000908152600760205260409020610ac8600183612e6b565b81548110610ae657634e487b7160e01b600052603260045260246000fd5b60009182526020909120015464010000000090046001600160e01b0316610b0b565b60005b6001600160e01b03169392505050565b601054610b3b576040516350f7da1560e11b815260040160405180910390fd5b60175460ff16610b5e57604051631cdde67b60e01b815260040160405180910390fd5b80610b7c5760405163162908e360e11b815260040160405180910390fd5b610b87600d3361194e565b610b9133826119fd565b503360009081526016602052604081208054839290610bb1908490612e14565b909155505060128054829190600090610bcb908490612e14565b9091555050336000818152601460209081526040808320546016835292819020548151868152928301939093528101919091527ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c4469060600160405180910390a250565b6001600160a01b03811633146108525760405162461bcd60e51b815260206004820152602260248201527f43616e206f6e6c792072656e6f756e6365206d616e6167657220666f72207365604482015261363360f11b606482015260840161067b565b6009546001600160a01b03163314610cbb5760405162461bcd60e51b815260040161067b90612ddf565b600c54600b546000916001600160a01b0391821691161415610d6657601254600c546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d559190612d2c565b610d5f9190612e6b565b9050610de4565b600c546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612d2c565b90505b600c54610dfb906001600160a01b03163383611a3e565b60408051338152602081018390527f40a999c547e777925d554a2673d8e2a2c0788390a91a9836f59b2d893e85034891016106d4565b83421115610e815760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161067b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610efb90610ef39060a00160405160208183030381529060405280519060200120611aa6565b858585611af4565b9050610f0681611b1c565b8614610f545760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161067b565b610f5e8188611814565b50505050505050565b60006108d1600d83611b44565b6009546001600160a01b03163314610f9e5760405162461bcd60e51b815260040161067b90612ddf565b6107a081611bff565b83421115610ff75760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161067b565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110268c611b1c565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061108182611aa6565b9050600061109182878787611af4565b9050896001600160a01b0316816001600160a01b0316146110f45760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161067b565b6110ff8a8a8a611c67565b50505050505050505050565b6009546001600160a01b031633146111355760405162461bcd60e51b815260040161067b90612ddf565b60175460ff6101009091041615156001141561116457604051631578538d60e01b815260040160405180910390fd5b600080611174600d868686611d8b565b6017805460ff19166001179055604080518881526020810184905290810182905291935091507f81fd1d59cc9507125b21e058eb609385cb7fffe3650dc38f983aa3c777f3f7b89060600160405180910390a15050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff841690811061122057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6000610823600d611dd5565b6009546001600160a01b031633146112965760405162461bcd60e51b815260040161067b90612ddf565b6001600160a01b0381166112fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161067b565b6107a0816118fc565b6001600160a01b0381166000908152600a602052604081205460ff16806108d15750506009546001600160a01b0391821691161490565b806000198114156113585750336000908152601660205260409020545b3360009081526016602052604090205481111561139d57336000908152601660205260409081902054905163cebd519360e01b8152600481019190915260240161067b565b6113a8600d3361194e565b33600090815260166020526040812080548392906113c7908490612e6b565b9091555050601280548291906000906113e1908490612e6b565b909155506113f190503382611e68565b50336000818152601460209081526040808320546016835292819020548151868152928301939093528101919091527f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600161080d565b61145382611dd5565b6002830155426006830181905560038301819055611472908290612e14565b82600401819055505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156114cd57507f000000000000000000000000000000000000000000000000000000000000000090565b6108237f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e9f565b61154181611304565b156107a0576001600160a01b0381166000818152600a6020908152604091829020805460ff191690558151338152908101929092527f142c2a791096690a19ea18712757698bee1e23180c084e221726a4a96e027a7b91016106d4565b8154600090815b818110156116105760006115b98284611ee9565b9050848682815481106115dc57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015463ffffffff1611156115fc5780925061160a565b611607816001612e14565b91505b506115a5565b81156116625784611622600184612e6b565b8154811061164057634e487b7160e01b600052603260045260246000fd5b60009182526020909120015464010000000090046001600160e01b0316611665565b60005b6001600160e01b031695945050505050565b600954600160a01b900460ff161515600114156116a75760405163358bc0db60e11b815260040160405180910390fd5b60006116b4600d83611b44565b9050806116d457604051632706c9e160e21b815260040160405180910390fd5b6001600160a01b0382166000908152601560205260408120556116f7600d611dd5565b6001600160a01b03808416600090815260146020526040902091909155600c5461172391168383611a3e565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561176757600080fd5b505afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f9190612d2c565b600b54600c549192506001600160a01b03918216911614156117cb576012546117c89082612e6b565b90505b60408051838152602081018390526001600160a01b038516917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7910160405180910390a2505050565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a461188d828483611f04565b50505050565b600063ffffffff8211156118f85760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161067b565b5090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6119588282611b44565b6001600160a01b038216600090815260088401602052604090205561197c82611dd5565b6001600160a01b038216600090815260078401602052604090208190556002830155600482015442106119b35781600401546119b5565b425b60068301556002820154600583015460405133927f28a694a51ab9a1b640ac10c5bff2e688efea56c330c01ac8eb9318aa2cd09fdf9261080d92918252602082015260400190565b6000611a2b7f0000000000000000000000000000000000000000000000000000000000000000333085612041565b611a358383612079565b50600192915050565b6040516001600160a01b038316602482015260448101829052611aa190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612087565b505050565b60006108d1611ab361147e565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b0587878787612159565b91509150611b1281612243565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6001600160a01b0381166000908152600783016020526040812054611b6b575060006108d1565b6001600160a01b0382166000908152600784016020526040812054611b8f85611dd5565b611b999190612e6b565b6001600160a01b0384166000908152600986016020526040812054919250633b9aca00611bc68484612e4c565b611bd09190612e2c565b6001600160a01b0386166000908152600888016020526040902054611bf59190612e14565b9695505050505050565b611c0881611304565b6107a0576001600160a01b0381166000818152600a6020908152604091829020805460ff191660011790558151338152908101929092527f8d235c6c97ff1b07a41b6b8ac6ea040a6a6b411b20a0f02f02946fa45590bcfc91016106d4565b6001600160a01b038316611cc95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161067b565b6001600160a01b038216611d2a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161067b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001840183905560038401829055600080611da68385612e14565b6004870181905560068701859055670de0b6b3a764000060028801556003870154925090505b94509492505050565b60008082600401544210611ded578260040154611def565b425b90506000836006015482611e039190612e6b565b600585015490915081611e1b57505050506002015490565b80611e2b57505050506002015490565b600081866001015484611e3e9190612e4c565b611e4c90633b9aca00612e4c565b611e569190612e2c565b9050808660020154611bf59190612e14565b6000611e743383612444565b611a357f00000000000000000000000000000000000000000000000000000000000000008484611a3e565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090505b9392505050565b6000611ef86002848418612e2c565b6108ce90848416612e14565b816001600160a01b0316836001600160a01b031614158015611f265750600081115b15611aa1576001600160a01b03831615611fb4576001600160a01b03831660009081526007602052604081208190611f619061244e8561245a565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611fa9929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611aa1576001600160a01b03821660009081526007602052604081208190611fea906125fd8561245a565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612032929190918252602082015260400190565b60405180910390a25050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261188d9085906323b872dd60e01b90608401611a6a565b6120838282612609565b5050565b60006120dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126939092919063ffffffff16565b805190915015611aa157808060200190518101906120fa9190612cf8565b611aa15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121905750600090506003611dcc565b8460ff16601b141580156121a857508460ff16601c14155b156121b95750600090506004611dcc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561220d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661223657600060019250925050611dcc565b9660009650945050505050565b600081600481111561226557634e487b7160e01b600052602160045260246000fd5b141561226e5750565b600181600481111561229057634e487b7160e01b600052602160045260246000fd5b14156122de5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161067b565b600281600481111561230057634e487b7160e01b600052602160045260246000fd5b141561234e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161067b565b600381600481111561237057634e487b7160e01b600052602160045260246000fd5b14156123c95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161067b565b60048160048111156123eb57634e487b7160e01b600052602160045260246000fd5b14156107a05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161067b565b61208382826126aa565b60006108ce8284612e6b565b8254600090819080156124b35785612473600183612e6b565b8154811061249157634e487b7160e01b600052603260045260246000fd5b60009182526020909120015464010000000090046001600160e01b03166124b6565b60005b6001600160e01b031692506124cf83858763ffffffff16565b915060008111801561251b575043866124e9600184612e6b565b8154811061250757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015463ffffffff16145b1561258957612529826126c2565b86612535600184612e6b565b8154811061255357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506125f4565b85604051806040016040528061259e43611893565b63ffffffff1681526020016125b2856126c2565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b60006108ce8284612e14565b612613828261272b565b6002546001600160e01b0310156126855760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161067b565b61188d60086125fd8361245a565b60606126a28484600085612812565b949350505050565b6126b4828261293a565b61188d600861244e8361245a565b60006001600160e01b038211156118f85760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161067b565b6001600160a01b0382166127815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161067b565b80600260008282546127939190612e14565b90915550506001600160a01b038216600090815260208190526040812080548392906127c0908490612e14565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361208360008383612a8b565b6060824710156128735760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161067b565b843b6128c15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067b565b600080866001600160a01b031685876040516128dd9190612d90565b60006040518083038185875af1925050503d806000811461291a576040519150601f19603f3d011682016040523d82523d6000602084013e61291f565b606091505b509150915061292f828286612a96565b979650505050505050565b6001600160a01b03821661299a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161067b565b6001600160a01b03821660009081526020819052604090205481811015612a0e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161067b565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612a3d908490612e6b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611aa1836000845b611aa1838383612acf565b60608315612aa5575081611ee2565b825115612ab55782518084602001fd5b8160405162461bcd60e51b815260040161067b9190612dac565b6001600160a01b03838116600090815260066020526040808220548584168352912054611aa192918216911683611f04565b80356001600160a01b0381168114612b1857600080fd5b919050565b803560ff81168114612b1857600080fd5b600060208284031215612b3f578081fd5b6108ce82612b01565b60008060408385031215612b5a578081fd5b612b6383612b01565b9150612b7160208401612b01565b90509250929050565b600080600060608486031215612b8e578081fd5b612b9784612b01565b9250612ba560208501612b01565b9150604084013590509250925092565b600080600080600080600060e0888a031215612bcf578283fd5b612bd888612b01565b9650612be660208901612b01565b95506040880135945060608801359350612c0260808901612b1d565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612c30578182fd5b612c3983612b01565b946020939093013593505050565b60008060008060008060c08789031215612c5f578182fd5b612c6887612b01565b95506020870135945060408701359350612c8460608801612b1d565b92506080870135915060a087013590509295509295509295565b60008060408385031215612cb0578182fd5b612cb983612b01565b9150602083013563ffffffff81168114612cd1578182fd5b809150509250929050565b600060208284031215612ced578081fd5b8135611ee281612ef9565b600060208284031215612d09578081fd5b8151611ee281612ef9565b600060208284031215612d25578081fd5b5035919050565b600060208284031215612d3d578081fd5b5051919050565b60008060408385031215612d56578182fd5b50508035926020909101359150565b600080600060608486031215612d79578283fd5b505081359360208301359350604090920135919050565b60008251612da2818460208701612e82565b9190910192915050565b6020815260008251806020840152612dcb816040850160208701612e82565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612e2757612e27612ee3565b500190565b600082612e4757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612e6657612e66612ee3565b500290565b600082821015612e7d57612e7d612ee3565b500390565b60005b83811015612e9d578181015183820152602001612e85565b8381111561188d5750506000910152565b600181811c90821680612ec257607f821691505b60208210811415611b3e57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80151581146107a057600080fdfea2646970667358221220f4d88d9bf30a76d9c1906216e6e1165f97b2464ecbe920c26d9e1649df857cb264736f6c63430008040033",
  "libraries": {
    "ERC20Metadata": "0xC10B6DAFE4D7F7c693F44C51E716166B599644Ba"
  },
  "devdoc": {
    "author": "Elysia",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "checkpoints(address,uint32)": {
        "details": "Get the `pos`-th checkpoint for `account`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "delegate(address)": {
        "details": "Delegate votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`"
      },
      "delegates(address)": {
        "details": "Get the address `account` is currently delegating to."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
      },
      "getPastVotes(address,uint256)": {
        "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
      },
      "getPoolData()": {
        "returns": {
          "endTimestamp": "The end timestamp of the round",
          "lastUpdateTimestamp": "The last update timestamp of the round",
          "rewardIndex": "The reward index of the round",
          "rewardPerSecond": "The total reward accrued per second in the round",
          "startTimestamp": "The start timestamp of the round",
          "totalPrincipal": "The total staked amount of the round"
        }
      },
      "getUserData(address)": {
        "params": {
          "user": "The user address"
        }
      },
      "getUserReward(address)": {
        "params": {
          "user": "The user address"
        }
      },
      "getVotes(address)": {
        "details": "Gets the current votes balance for `account`"
      },
      "initNewPool(uint256,uint256,uint256)": {
        "params": {
          "duration": "The duration of the initiated round",
          "rewardPerSecond": "The total accrued reward per second in new round",
          "startTimestamp": "The start timestamp of initiated round"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "numCheckpoints(address)": {
        "details": "Get number of checkpoints for `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount to stake."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount to withdraw"
        }
      }
    },
    "title": "Elyfi StakingPool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Allownace not supported"
      },
      "approve(address,uint256)": {
        "notice": "Approval not supported"
      },
      "claim()": {
        "notice": "Transfer accrued reward to msg.sender. User accrued reward will be reset and user reward index will be set to the current reward index."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Allownace not supported"
      },
      "getPoolData()": {
        "notice": "Returns the state and data of the round"
      },
      "getRewardIndex()": {
        "notice": "Returns reward index of the round"
      },
      "getUserData(address)": {
        "notice": "Returns the state and data of the user"
      },
      "getUserReward(address)": {
        "notice": "Returns user accrued reward index of the round"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Allownace not supported"
      },
      "initNewPool(uint256,uint256,uint256)": {
        "notice": "Init the new round. After the round closed, staking is not allowed."
      },
      "stake(uint256)": {
        "notice": "Stake the amount of staking asset to pool contract and update data."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer not supported"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer not supported"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw the amount of principal from the pool contract and update data"
      }
    },
    "notice": "Users can stake their asset and earn reward for their staking. The reward calculation is based on the reward index and user balance. The amount of reward index change is inversely proportional to the total amount of supply. Accrued rewards can be obtained by multiplying the difference between the user index and the current index by the user balance. User index and the pool index is updated and aligned with in the staking and withdrawing action.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 119,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 125,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 127,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1421,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)2152_storage)"
      },
      {
        "astId": 750,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_delegates",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 756,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)741_storage)dyn_storage)"
      },
      {
        "astId": 760,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Checkpoint)741_storage)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3482,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "emergencyStop",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3486,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "managers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3489,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "stakingAsset",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)727"
      },
      {
        "astId": 3492,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "rewardAsset",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)727"
      },
      {
        "astId": 3495,
        "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
        "label": "_poolData",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(PoolData)3479_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint)741_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)741_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20Votes.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)727": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Checkpoint)741_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Checkpoint)741_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)2152_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)2152_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)741_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Votes.Checkpoint",
        "members": [
          {
            "astId": 738,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 740,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2152_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2151,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolData)3479_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolV2.PoolData",
        "members": [
          {
            "astId": 3450,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3452,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3454,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "rewardIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3456,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3458,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3460,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3462,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3466,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "userIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3470,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "userReward",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3474,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "userPrincipal",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3476,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "isOpened",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 3478,
            "contract": "contracts/StakingPoolV2.sol:StakingPoolV2",
            "label": "isFinished",
            "offset": 1,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}